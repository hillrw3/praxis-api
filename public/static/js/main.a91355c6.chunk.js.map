{"version":3,"sources":["Home.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","process","Home","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchHabits","fetch","concat","then","response","json","setState","habits","completeHabit","habit","id","method","headers","Content-Type","addHabit","body","JSON","stringify","title","state","newHabit","deleteHabit","onChange","e","target","value","handleKeyPress","key","todo","completed","inherits","createClass","_this2","_this$state$habits","react_default","a","createElement","className","type","placeholder","onKeyPress","onClick","map","current_streak","React","Component","App","Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a91355c6.chunk.js","sourcesContent":["import React from \"react\"\nimport './Home.scss'\n\nconst API_URL = process.env.API_URL || \"http://localhost:3000/api\"\n\nexport class Home extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      newHabit: '',\n      habits: {\n        todo: [],\n        completed: []\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.fetchHabits()\n  }\n\n  fetchHabits = () => {\n    fetch(`${API_URL}/progress_report`)\n      .then(response => response.json())\n      .then(response => {\n        this.setState({habits: response})\n      })\n  }\n\n  completeHabit = (habit) => {\n    fetch(`${API_URL}/habits/${habit.id}/complete`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    })\n      .then(this.fetchHabits)\n  }\n\n  addHabit = () => {\n    fetch(`${API_URL}/habits`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({habit: {title: this.state.newHabit}})\n    })\n      .then(() => {\n        this.setState({newHabit: ''})\n        this.fetchHabits()\n      })\n  }\n\n  deleteHabit = (habit) => {\n    fetch(`${API_URL}/habits/${habit.id}`, {\n      method: 'DELETE',\n    })\n      .then(this.fetchHabits)\n  }\n\n  onChange = (e) => {\n    this.setState({newHabit: e.target.value})\n  }\n\n  handleKeyPress = (e) => {\n    if (e.key === 'Enter') this.addHabit()\n  }\n\n  render() {\n    const {habits: {todo, completed}} = this.state\n\n    return (\n      <div className=\"home\">\n        <div className=\"habit-list\">\n          <h4 className='header'>Daily Habits</h4>\n          <span className=\"new-habit habit\">\n            <div className=\"habit-title-and-actions\">\n              <input type=\"text\"\n                     placeholder=\"Start a new habit\"\n                     onChange={this.onChange}\n                     onKeyPress={this.handleKeyPress}\n                     value={this.state.newHabit}/>\n              <button onClick={this.addHabit}>+</button>\n            </div>\n          </span>\n          <ul className='list todo'>\n            {todo.map(habit => (\n              <div className=\"habit\" key={habit.id}>\n                <div className=\"habit-title-and-actions\">\n                  <span className=\"habit-title\">{habit.title}</span>\n                  <span className=\"habit-actions\">\n                  <button onClick={() => this.completeHabit(habit)}>âœ“</button>\n                  <button onClick={() => this.deleteHabit(habit)}>X</button>\n                </span>\n                </div>\n                <div className=\"current-streak\">Current streak: {habit.current_streak}</div>\n              </div>\n            ))}\n          </ul>\n          <ul className='list completed'>\n            {completed.map(habit => (\n              <div className=\"habit completed\" key={habit.id}>\n                <div className=\"habit-title-and-actions\">\n                  <span className=\"habit-title\">{habit.title}</span>\n                  <span className=\"habit-actions\">\n                    <button onClick={() => this.deleteHabit(habit)}>X</button>\n                  </span>\n                </div>\n                <div className=\"current-streak\">Current streak: {habit.current_streak}</div>\n              </div>\n            ))}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}","import React, {Component} from 'react'\nimport './App.scss'\nimport {Home} from \"./Home\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"header\">\n          <h2>Praxis</h2>\n        </div>\n        <div className=\"content\">\n          <Home/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}